*,
::before,
::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
    background: #f1f1f1;
    font-family: Arial, Helvetica, sans-serif;
}

.scene{
  width: 200px;
  height: 200px;
  margin: 200px auto 0;
  perspective: 1000px;
  /* détermine la distance entre le plan d'équation z = 0 et la position de l'utilisateur afin de donner une perspective aux objets positionnés dans l'espace 3D. Chaque élément pour lequel la côte (z) est positif sera plus grand et chaque élément pour lequel z est négatif apparaîtra plus petit. La force de cet effet est déterminée par la valeur de cette propriété. */
}

.scene .cube{
  width: 100%;
  height: 100%;
  transform-style: preserve-3d; 
  /* sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element. */
  /* If flattened, the element's children will not exist on their own in the 3D-space.
  As this property is not inherited, it must be set for all non-leaf descendants of the element. */
  animation: spin 3s infinite linear;
}
@keyframes spin {
  /* 100%{
    transform: rotateX(360deg) rotateY(360deg);
  } */
  from{
    transform: rotateX(0deg) rotateY(0deg);
  }
  to{
    transform: rotateX(360deg) rotateY(360deg);
  }
}

.scene .face{
  position: absolute;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, turquoise, rgb(90, 185, 90));
  border-radius: 5px;
  /* box-shadow: 0 0 25px rgba(0,0,0,0.1); */
  font-size: 50px;
  text-align: center;
  line-height: 200px;
}
.scene .top{
  transform: rotateX(90deg) translateZ(100px);
}
.scene .bottom{
  transform: rotateX(-90deg) translateZ(100px);
}
.scene .left{
  transform: rotateY(90deg) translateZ(100px);
}
.scene .right{
  transform: rotateY(-90deg) translateZ(100px);
}
.scene .front{
  transform: translateZ(100px);
}
.scene .back{
  transform: rotateX(-180deg) translateZ(100px);
}

.container{
  /* permet de créer l'environnement 3D qui va jouer sur le cube */
  width: 200px;
  height: 200px;
  margin: 300px auto 0;
  perspective: 1000px; /* valeur classique */
  font-size: 50px;
  text-align: center;
  line-height: 200px;
}

.container .cube{
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d;
  animation: spin 4s linear infinite;
}

.container .face{
  position: absolute;
  width: 200px;
  height: 200px;
  /* background: linear-gradient(
    43deg,
    #41d0ac 0%,
    #7169e2 46%,
    #ee88ee 100%); */
}

.top{
  background: linear-gradient(
    43deg,
    #41d0ac 0%,
    #7169e2 46%,
    #ee88ee 100%);
  transform: rotateX(90deg) translateZ(100px);
}
.bottom{
  background: linear-gradient(
    43deg,
    #41d0ac 0%,
    #7169e2 46%,
    #ee88ee 100%);
  transform: rotateX(-90deg) translateZ(100px);
}
.right{
  background: linear-gradient(
    43deg,
    #41d0ac 0%,
    #7169e2 46%,
    #ee88ee 100%);
  transform: rotateY(90deg) translateZ(100px);
}
.left{
  background: linear-gradient(
    43deg,
    #41d0ac 0%,
    #7169e2 46%,
    #ee88ee 100%);
  transform: rotateY(-90deg) translateZ(100px);
}
.front{
  background: linear-gradient(
    43deg,
    #41d0ac 0%,
    #7169e2 46%,
    #ee88ee 100%);
  transform: rotateX(0deg) translateZ(100px);
}
.back{
  background: linear-gradient(
    43deg,
    #41d0ac 0%,
    #7169e2 46%,
    #ee88ee 100%);
  transform: rotateX(180deg) translateZ(100px);
}